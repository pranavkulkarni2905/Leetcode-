/*
container with most water
................

You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
*/
class Solution {
    public int maxArea(int[] height) {
        int left = 0;
        int right = height.length - 1;
        int max = 0;
        while(left < right){
            int w = right - left;
            int h = Math.min(height[left], height[right]);
            int area = h * w;
            max = Math.max(max, area);
            if(height[left] < height[right]) left++;
            else if(height[left] > height[right]) right--;
            else {
                left++;
                right--;
            }
        }
        return max;
    }
}
// import java.lang.*;
// class Solution {
//     public int maxArea(int[] height) {
        
//         int area;
//         int result=0;
//         int n=height.length;
//         for(int i=0;i<n-1;i++){
//             for(int j=i+1;j<n;j++){
//                 area=Math.min(height[i],height[j])*(j-i);
//                 result=Math.max(result,area);
//             }
//         }
//         return result;
//     }
    // int min(int a , int b){

    //     if(a<b){
    //         return a;
    //     }
    //     return b;
    // }
    // int max(int a,int b){
    //     if(a>b){
    //         return a;
    //     }
    //     return b;
    // }
